@page "/product/{id}"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@rendermode InteractiveServer
@using foodApp.Models
@inject LogService LogService
@using Microsoft.Extensions.Options
@inject IOptions<ApiSettings> ApiSettings
@inject IJSRuntime JSRuntime


<div class="border rounded h-100 p-3 col-xl-6 m-auto mt-5 row">
    <div class="col-lg-6">
        <img style="height: 250px; object-fit: contain;" class="card-img-top img-fluid" src="@res?.Data.Image"
            alt="Card image cap" />
        <button @onclick="AddToFavorites" class="w-100 mt-3 btn btn-primary rounded-1">Legg til i Favoritter</button>

    </div>


    <div class="col-lg-6 mb-5">
        <div class="d-flex align-content-center align-items-center gap-2 px-3">

            <img style="width: 35px; height: 35px;" class="rounded-circle" src="@res?.Data.Store?.Logo" alt="">
            <p class="card-text m-0 p-0">@res?.Data?.Store?.Name</p>
        </div>
        <div class="card-body mt-3 d-flex flex-column ">
            <h4 class="card-title">@res?.Data.Name</h4>
            <p class="card-text">@res?.Data.Brand </p>
            <p class="card-text "><span class="">PRIS: </span>@res?.Data.CurrentPrice kr</p>
            <a target="blank" href=@res?.Data.Url>Vis produkt hos butikk</a>



            <div>
                <p class="mt-3 text-decoration-underline pointer-event" role="button" @onclick="ToggleAllergnes">Vis
                    Allergener <i class="bi bi-arrow-down-short"></i></p>
                <Collapse @ref="collapse1">
                    <Card>
                        <CardBody>
                            <h5>Allergener</h5>
                            <ul>
                                @if (res?.Data?.Allergens != null)
                                {
                                    foreach (var allergen in res.Data.Allergens)
                                    {
                                        if (allergen.Contains == "YES")
                                        {
                                            hasAllergen = true;
                                            <li>@allergen.DisplayName</li>
                                        }
                                    }
                                    if (!hasAllergen)
                                    {
                                        <li>Ingen allergener funnet</li>
                                    }
                                }
                                else
                                {
                                    <li>Ingen data funnet</li>
                                }
                            </ul>
                        </CardBody>
                    </Card>
                </Collapse>
            </div>
            <div>
                <p role="button" class="text-decoration-underline" @onclick="ToggleIngredients">Vis
                    Ingredienser <i class="bi bi-arrow-down-short "></i></p>
                <Collapse @ref="collapse2">
                    <Card>
                        <CardBody>
                            <h5>Ingredienser</h5>
                            <p>
                                @res?.Data.Ingredients
                            </p>
                        </CardBody>
                    </Card>
                </Collapse>
            </div>
        </div>

    </div>
    <LineChart @ref="lineChart" Width="1200" class="mb-3" />

</div>

@code {
    private FavoriteProducts _favoriteProducts = default!;
    private List<PrevViewedModel> Products { get; set; }

    private async Task AddToFavorites()
    {
        var product = new PrevViewedModel
            {
                Id = res.Data.Id,
                Name = res.Data.Name,
            };

        await _favoriteProducts.AddProductAsync(product);
        Console.WriteLine("Product added to favorites.");
    }













    Collapse collapse1 = default!;
    Collapse collapse2 = default!;
    private async Task ToggleAllergnes() => await collapse1.ToggleAsync();
    private async Task ToggleIngredients() => await collapse2.ToggleAsync();

    [Parameter]
    public string? Id { get; set; }
    private bool hasAllergen = false;
    private ApiResponse? res;
    private bool error = false;
    private string errorMessage = "";

    private string bearerToken = "";

    private bool isDataReady = false;



    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;


    List<string> dates = new List<string>();
    List<double> prices = new List<double>();

    protected override void OnInitialized()
    {
        _favoriteProducts = new FavoriteProducts(JSRuntime);


        bearerToken = ApiSettings.Value.ApiKey;

        var colors = ColorBuilder.CategoricalTwelveColors;

        var dataSets = new List<IChartDataset>();

        var dataSet = new LineChartDataset()
            {
                Label = "Price",
                Data = prices,
                BackgroundColor = new List<string> { colors[0] },
                BorderColor = new List<string> { colors[0] },
                BorderWidth = new List<double> { 2 },
                HoverBorderWidth = new List<double> { 4 },
                PointBackgroundColor = new List<string> { colors[0] },
                PointRadius = new List<int> { 0 }, // hide points
                PointHoverRadius = new List<int> { 4 }
            };
        dataSets.Add(dataSet);

        chartData = new ChartData()
            {
                Labels = dates,
                Datasets = dataSets
            };

        lineChartOptions = new();
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

        lineChartOptions.Scales.X!.Title!.Text = "Dato";
        lineChartOptions.Scales.X.Title.Display = true;

        lineChartOptions.Scales.Y!.Title!.Text = "Pris i kr";
        lineChartOptions.Scales.Y.Title.Display = true;

        lineChartOptions.Plugins.Title!.Text = "Pris historikk";
        lineChartOptions.Plugins.Title.Display = true;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);

        }
        await base.OnAfterRenderAsync(firstRender);

        if (isDataReady)
        {
            await lineChart.UpdateAsync(chartData, lineChartOptions);
        }
    }



    override protected async Task OnInitializedAsync()
    {
        await FetchData(Id);

    }



    public async Task FetchData(string searchParam)
    {
        var request = new HttpRequestMessage(HttpMethod.Get, $"https://kassal.app/api/v1/products/id/{searchParam}");
        request.Headers.Add("Accept", "application/json");
        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", bearerToken);

        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        @* LogService.LogResponse(response); *@


        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            res = await JsonSerializer.DeserializeAsync<ApiResponse>(responseStream);


            if (res?.Data.PriceHistory != null)
            {
                for (int i = 0; i < res.Data.PriceHistory.Count; i += 4)
                {
                    var price = res.Data.PriceHistory[i];
                    DateTime date_object = DateTime.Parse(price.Date);
                    string formatted_date = date_object.ToString("dd-MM-yyyy");
                    dates.Add(formatted_date);
                    prices.Add(price.Price);
                }

                dates.Reverse();
                prices.Reverse();
            }

            isDataReady = true;


        }
        else
        {
            error = true;
            errorMessage = response?.ReasonPhrase ?? "unknown error";
        }
    }


    public class ApiResponse
    {
        [JsonPropertyName("data")]
        public ProductData Data { get; set; } = new ProductData();
    }

}
