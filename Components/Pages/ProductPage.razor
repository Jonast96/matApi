@page "/product/{id}"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@rendermode InteractiveServer
@using foodApp.Models
@inject LogService LogService

<div class="border rounded h-100 p-3 col-md-6 m-auto mt-5">
    <img style="height: 250px; object-fit: contain;" class="card-img-top img-fluid" src="@res?.Data.Image"
        alt="Card image cap" />

    <div class="d-flex align-content-center align-items-center gap-2 px-3">

        <img style="width: 35px; height: 35px;" class="rounded-circle" src="@res?.Data.Store?.Logo" alt="">
        <p class="card-text m-0 p-0">@res?.Data?.Store?.Name</p>
    </div>
    <div class="card-body mt-3 d-flex flex-column ">
        <h5 class="card-title">@res?.Data.Name</h5>
        <p class="card-text">@res?.Data.Brand </p>
        <p class="card-text"><span class="fw-bold">EAN: </span> @res?.Data.Ean</p>
        <p class="card-text "><span class="fw-bold">PRIS: </span>@res?.Data.CurrentPrice kr</p>
        <a target="blank" href=@res?.Data.Url>Vis produkt hos butikk</a>

        <div>
            <Button class="my-3" Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="ToggleAllergnes">Vis
                Allergener</Button>
            <Collapse @ref="collapse1">
                <Card>
                    <CardBody>
                        <h5>Allergener</h5>
                        <ul>
                            @if (res?.Data?.Allergens != null)
                            {
                                foreach (var allergen in res.Data.Allergens)
                                {
                                    if (allergen.Contains == "YES")
                                    {
                                        hasAllergen = true;
                                        <li>@allergen.DisplayName</li>
                                    }
                                }
                                if (!hasAllergen)
                                {
                                    <li>Ingen allergener funnet</li>
                                }
                            }
                            else
                            {
                                <li>Ingen data funnet</li>
                            }
                        </ul>
                    </CardBody>
                </Card>
            </Collapse>
        </div>
        <div>
            <Button class="my-3" Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="ToggleIngredients">Vis
                Ingredienser</Button>
            <Collapse @ref="collapse2">
                <Card>
                    <CardBody>
                        <h5>Ingredienser</h5>
                        <p>
                            @res?.Data.Ingredients
                        </p>
                    </CardBody>
                </Card>
            </Collapse>
        </div>
    </div>
</div>





@code {
    Collapse collapse1 = default!;
    Collapse collapse2 = default!;
    private async Task ToggleAllergnes() => await collapse1.ToggleAsync();
    private async Task ToggleIngredients() => await collapse2.ToggleAsync();

    private bool hasAllergen = false;
    private ApiResponse? res;
    private bool error = false;
    private string errorMessage = "";
    private string bearerToken = "USZcHXCrTAi6p9tb9GRNJUoWehAXhNEj79JYGTJa";


    [Parameter]
    public string? Id { get; set; }




    override protected async Task OnInitializedAsync()
    {
        await FetchData(Id);
        Console.WriteLine($"id: {Id}");

    }



    public async Task FetchData(string searchParam)
    {
        var request = new HttpRequestMessage(HttpMethod.Get, $"https://kassal.app/api/v1/products/id/{searchParam}");
        request.Headers.Add("Accept", "application/json");
        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", bearerToken);

        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        @* LogService.LogResponse(response); *@

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            res = await JsonSerializer.DeserializeAsync<ApiResponse>(responseStream);
        }
        else
        {
            error = true;
            errorMessage = response?.ReasonPhrase ?? "unknown error";
        }
    }




    public class ApiResponse
    {
        [JsonPropertyName("data")]
        public ProductData Data { get; set; } = new ProductData();
    }





















}
