@page "/"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@rendermode InteractiveServer
@using foodApp.Models
@inject LogService LogService

<PageTitle>SearchProducts</PageTitle>

<div class="container">
    <h1>Search Products</h1>

    <div>
        <div>
            <EditForm FormName="sad" Model="@this" OnValidSubmit="@HandleSubmit">
                <label for="search">Enter ID of item:</label>
                <InputText id="search" @bind-Value="search" />
                <button type="submit">Search</button>
            </EditForm>
        </div>
        @if (!error && res != null && res.Data.Count > 0)
        {
            <div class="row g-3 mt-5">
                <div>
                    <Dropdown>
                        <DropdownToggleButton Color="ButtonColor.Primary">Sort by</DropdownToggleButton>
                        <DropdownMenu>
                            <DropdownItem @onclick="SetPriceDesc">Pris: Høyeste Først</DropdownItem>
                            <DropdownItem @onclick="SetPriceAsc">Pris: Laveste Først</DropdownItem>
                        </DropdownMenu>
                    </Dropdown>
                </div>
                @foreach (var item in res.Data)
                {
                    <a href="/product/@item.Id" class="border-0  card col-md-6 col-lg-4 text-black text-decoration-none">

                        <div class="border  rounded h-100 p-3">
                            <img style="height: 250px; object-fit: contain;" class="card-img-top img-fluid" src="@item.Image"
                                alt="Card image cap" />

                            <div class="d-flex align-content-center align-items-center gap-2 px-3">

                                <img style="width: 35px; height: 35px;" class="rounded-circle" src=@item.Store.Logo alt="">
                                <p class="card-text m-0 p-0">@item.Store.Name</p>
                            </div>
                            <div class="card-body mt-3">
                                <h5 class="card-title">@item.Name</h5>
                                <p class="card-text">@item.Brand"</p>
                                <p class="card-text">@item.Ean</p>
                                <p>Price: @item.CurrentPrice</p>
                                <p class="card-text">@item.Vendor</p>
                            </div>
                        </div>
                    </a>
                }
            </div>
        }
        else if (error)
        {
            <p>Error: @errorMessage</p>
        }
    </div>

</div>



@code {
    private ApiResponse? res;
    private bool isLoading = false;
    private bool error = false;
    private string errorMessage = "";
    private string bearerToken = "USZcHXCrTAi6p9tb9GRNJUoWehAXhNEj79JYGTJa";
    string search = "";

    private async Task HandleSubmit()
    {
        isLoading = true;
        error = false; // Reset error state at each submit
        errorMessage = "";


        if (string.IsNullOrWhiteSpace(search))
        {
            error = true;
            errorMessage = "Search parameter cannot be empty";
            isLoading = false; // Stop loading state
            return;
        }

        await FetchData(search, sort);

        isLoading = false; // Stop loading state after fetch operation
    }

    private string sort = "&size=10&price_min=0&price_max=1000000";

    private async Task SetPriceDesc()
    {
        sort = sort + "&sort=price_desc";
        await FetchData(search, sort);
        StateHasChanged();
    }

    private async Task SetPriceAsc()
    {
        sort = sort + "&sort=price_asc";
        await FetchData(search, sort);
        StateHasChanged();
    }



    public async Task FetchData(string searchParam, string sort)
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
        $"https://kassal.app/api/v1/products/?search={searchParam}{sort}");
        request.Headers.Add("Accept", "application/json");
        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", bearerToken);

        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        LogService.LogResponse(response);


        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };
            res = await JsonSerializer.DeserializeAsync<ApiResponse>(responseStream, options);
        }
        else
        {
            error = true;
            errorMessage = response?.ReasonPhrase ?? "Unknown error occurred.";
        }

    }

    public class ApiResponse
    {
        public List<ProductData> Data { get; set; } = new List<ProductData>();
    }

}
