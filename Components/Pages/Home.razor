@page "/"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@rendermode InteractiveServer
@using foodApp.Models
@inject LogService LogService

<PageTitle>SearchProducts</PageTitle>

<div class="container mt-5">
    <div class=" ">
        <h1>Søk etter produkter</h1>
        <div class="col-md-6 ">
            <EditForm class="input-group" FormName="formname" Model="@this" OnValidSubmit="@HandleSubmit">
                <InputText class="form-control" placeholder="Produkt" id="search" @bind-Value="search" />
                <button class="btn btn-outline-secondary" type="submit">Søk</button>
            </EditForm>
        </div>
        @if (!error && res != null && res.Data.Count > 0)
        {
            <div class="row g-3 mt-3">
                <div>
                    <Dropdown>
                        <DropdownToggleButton Color="ButtonColor.Primary">Sort by</DropdownToggleButton>
                        <DropdownMenu>
                            <DropdownItem @onclick="SetPriceAsc">Pris: Laveste Først</DropdownItem>
                            <DropdownItem @onclick="SetPriceDesc">Pris: Høyeste Først</DropdownItem>
                        </DropdownMenu>
                    </Dropdown>
                </div>
                @foreach (var item in res.Data)
                {
                    <a href="/product/@item.Id" class="border-0  card col-md-6 col-lg-4 text-black text-decoration-none">

                        <div class="border  rounded h-100 p-3">
                            <img style="height: 250px; object-fit: contain;" class="card-img-top img-fluid" src="@item.Image"
                                alt="Card image cap" />

                            <div class="d-flex align-content-center align-items-center gap-2 px-3">

                                <img style="width: 35px; height: 35px;" class="rounded-circle" src=@item.Store.Logo alt="">
                                <p class="card-text m-0 p-0">@item.Store.Name</p>
                            </div>
                            <div class="card-body mt-3">
                                <h5 class="card-title">@item.Name</h5>
                                <p class="card-text">@item.Brand"</p>
                                <p class="card-text">@item.Ean</p>
                                <p>Price: @item.CurrentPrice</p>
                                <p class="card-text">@item.Vendor</p>
                            </div>
                        </div>
                    </a>
                }
                <div class="d-flex gap-2 align-items-center mb-5">
                    <button @onclick="PrevPage" class=" btn btn-secondary">Forrige side</button>
                    <p class="m-0 p-0">Side: @pageNumber</p>
                    <button @onclick="NextPage" class=" btn btn-primary">Neste side</button>

                </div>
            </div>
        }
        else if (error)
        {
            <p>Error: @errorMessage</p>
        }
    </div>

</div>



@code {
    private ApiResponse? res;
    private bool isLoading = false;
    private bool error = false;
    private string errorMessage = "";
    private string bearerToken = "USZcHXCrTAi6p9tb9GRNJUoWehAXhNEj79JYGTJa";
    string search = "";
    private int pageNumber = 1;
    private string baseUrl = "https://kassal.app/api/v1/products/";
    private string sortParam = "";

    private async Task HandleSubmit()
    {
        isLoading = true;
        error = false;
        errorMessage = "";
        await FetchData();
        isLoading = false;
    }




    private async Task SetPriceDesc()
    {
        sortParam = "&sort=price_desc";
        await FetchData();
    }

    private async Task SetPriceAsc()
    {
        sortParam = "&sort=price_asc";
        await FetchData();
    }

    private async Task removeSorting()
    {
        sortParam = "";
        await FetchData();
    }

    private async Task NextPage()
    {
        pageNumber++;
        await FetchData();
    }
    private async Task PrevPage()
    {
        if (pageNumber > 1)
        {
            pageNumber--;
            await FetchData();
        }
        else
        {
            pageNumber = 1;

        }

    }





    public async Task FetchData()
    {
        if (string.IsNullOrWhiteSpace(search))
        {
            error = true;
            errorMessage = "Søkefeltet kan ikke være tomt";
            isLoading = false;
            return;
        }

        var queryParams = $"page={pageNumber}&search={search}&size=12&price_min=0&price_max=1000000{sortParam}";
        var requestUrl = $"{baseUrl}?{queryParams}";
        var request = new HttpRequestMessage(HttpMethod.Get, requestUrl);
        request.Headers.Add("Accept", "application/json");
        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", bearerToken);

        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        LogService.LogResponse(response);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            res = await JsonSerializer.DeserializeAsync<ApiResponse>(responseStream, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
        }
        else
        {
            error = true;
            errorMessage = $"Error: {response.StatusCode}";
        }

    }

    public class ApiResponse
    {
        public List<ProductData> Data { get; set; } = new List<ProductData>();
    }

}
